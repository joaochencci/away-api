{
  "name": "hoard",
  "version": "0.1.5",
  "description": "node.js lib for storing time series data on disk, similar to RRD.",
  "homepage": "https://github.com/cgbystrom/hoard",
  "author": {
    "name": "Carl BystrÃ¶m",
    "email": "cgbystrom@gmail.com"
  },
  "keywords": [
    "timeseries",
    "rrd",
    "rrdtool",
    "db",
    "database",
    "metric",
    "stats",
    "statistics"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/cgbystrom/hoard.git"
  },
  "bugs": {
    "url": "https://github.com/cgbystrom/hoard/issues"
  },
  "directories": {
    "lib": "./lib"
  },
  "main": "./lib/hoard.js",
  "engines": {
    "node": ">= 0.4.0"
  },
  "dependencies": {
    "put": ">= 0.0.5",
    "binary": ">= 0.2.5"
  },
  "devDependencies": {
    "coffee-script": ">= 1.0.1",
    "expresso": ">= 0.8.1"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/cgbystrom/hoard/raw/master/LICENSE"
    }
  ],
  "readme": "hoard\n=====\n\nHoard is a library for storing time series data data on disk in an efficient way.\nThe format lends itself very for collecting and recording data over time, for example\ntemperatures, CPU utilization, bandwidth consumption, requests per second and other metrics.\nIt is very similar to RRD, but comes with a few improvements.\n\nBackground\n----------\nHoard is based on an existing file format called Whisper.\nIt was designed by Chris Davis for the Graphite project and features improvements over the RRD file format.\nWhisper is implemented in Python and Hoard is merely a straight-forward port\nof that implementation over to node.js.\n\nRRD is a very well-known file format for storing time series data on disk and has been around for over a decade.\nThe Whisper file format tries to overcome a few limitations with RRD that makes it impractical at certain times.\nThis new file format address the following issues, currently found in RRD:\nThings adressed by WhisperThe following are problems with the RRD file format:\n\n  * No updates for a timestamp prior the most recent update\n    This makes it impossible to file old, possibly missed, updates to an RRD archive.\n    A big limitation when you try to be fault-tolerant and handle metrics arriving out-of-order.\n  * No batch updates\n    RRD doesn't support making updates of multiple values in a single batch.\n    Updating each value separately yields many unneccessary and expensive disk operations\n  * No irregular updates\n    When you update an RRD but don't follow up with another update soon, your original update will be lost.\n\n(These issues were prevalent in RRD at the time Whisper was designed, it may have changed since then)\n\nA simple implementation of RRD using C bindings was therefore out of the question for the reasons listed above.\nUsing the C library would have required another native dependency and lot of glue getting it to work in an asynchronous manner.\nThe current implementation in CoffeeScript is really straight-forward, checks in at around 600 LOC.\nPerformance should really not be an issue compared to a native version since A) V8 is really fast and B) You're ultimately disk bound.\nIn a high-throughput environment you are also very likely to be buffering your data an only write to disk at given intervals.\n\nThe name \"Hoard\" was selected because of the meaning \"A stock or store of money or valued objects, typically one that is secret or carefully guarded\".\n(See http://en.wikipedia.org/wiki/Hoard)\n\n\nInstalling\n----------\nJust use NPM and type:\n\n    npm install hoard\n\n\nExample\n-------\n\n```javascript\n// Create a Hoard file for storing time series data.\n// Inside of it there will be two archives with retention periods:\n// 1) 1 second per point for a total of 60 points (60 seconds of data)\n// 2) 10 second per point for a total of 600 points (100 minutes of data)\nhoard.create('users.hoard', [[1, 60], [10, 600]], 0.5, function(err) {\n    if (err) throw err;\n    console.log('Hoard file created!');\n});\n```\n\n```javascript\n// Update an existing Hoard file with value 1337 for timestamp 1311169605\n// When doing multiple updates in batch, use updateMany() instead as it's faster\nhoard.update('users.hoard', 1337, 1311169605, function(err) {\n    if (err) throw err;\n    console.log('Hoard file updated!');\n});\n```\n\n```javascript\n// Update multiple values at once in an existing Hoard file.\n// This function is much faster when dealing with multiple values\n// that need to be written at once.\nhoard.update('users.hoard', [[1312490305, 4976], [1312492105, 3742]], function(err) {\n    if (err) throw err;\n    console.log('Hoard file updated!');\n});\n```\n\n```javascript\n// Retrieve data from a Hoard file between timestamps 1311161605 and 1311179605\nhoard.fetch('users.hoard', 1311161605, 1311179605, function(err, timeInfo, values) {\n    if (err) throw err;\n    console.log('Values', values); // Displays an array of values\n});\n```\n\nImplementation details\n----------------------\nHoard is written for node.js using CoffeeScript. Uses almost the same number of lines as\nthe Python version. Probably requires some additional lines for async parts but those things certainly\ncan be reduced by using more/better async/CoffeeScript idioms. It is a line-by-line port so perhaps there's\na more fitting node.js paradigm that can be used to further improve readability and performance of this.\n\nSome dependencies such as underscore.js and async.js were packaged inside instead as a separate dependency.\nNot sure of the best practice of doing this, but depending on these packages through NPM felt unneccesary\nsince they both are pure JS code.\n\nThe tests are testing the implementation against the Python implementation to ensure\nmaximum compatibility. They don't require the Python version to be installed but rather uses\nfiles generated by it. The tests were implemented using Expresso after some experimentation with Vows.\nRan into some issues with Vows and decided to use the much simpler (and dumber) Expresso instead.\n\n\nAuthors\n-------\n\n  - Carl Bystr&ouml;m ([@cgbystrom](http://twitter.com/cgbystrom))\n  - Original file format design by Chris Davis\n\nLicense\n-------\n\nOpen-source licensed under the MIT license (see _LICENSE_ file for details).",
  "readmeFilename": "README.md",
  "_id": "hoard@0.1.5",
  "_from": "hoard@~0.1.5"
}
